analyze_tibco:
  description: >
    Perform a comprehensive analysis of the provided TIBCO BusinessEvents and TIBCO BusinessWorks projects, focusing on key architectural 
    and functional components including: business logic, integration points, process definitions, processes and subprocesses, adapters, 
    error handling mechanisms, logging strategies, exception handling, database connection configurations, global variables, event 
    processing flows, preprocessors, decision tables, and rule functions. Deliver a structured breakdown of each element, explaining its 
    role, behavior, and interdependencies. Provide actionable insights on how these components can be mapped, adapted, or re-engineered 
    during migration to Java 25 with Spring Boot 3.5.0. Highlight considerations for preserving functional parity and mitigating migration risks.
  expected_output: >
    A detailed technical analysis documenting all relevant aspects of the TIBCO project's architecture and functionality. 
    The output should include clear descriptions of business logic, integration points, process definitions, subprocesses, adapters, 
    error and exception handling mechanisms, logging practices, database configurations, global variables, event processing, 
    preprocessors, decision tables, and rule functions. Structure the analysis to serve as a migration blueprint for developing 
    a Java Spring Boot application that replicates the original TIBCO system with high fidelity. Ensure the documentation is 
    technically precise, migration-aware, and suitable for direct implementation reference.
  agent: tibco_analyst

create_spring_boot:
  description: >
    Develop a Java 25 and Spring Boot 3.5.0 application that replicates the complete business logic, workflows, and integration 
    patterns of the provided TIBCO BusinessWorks and BusinessEvents project. Implement an end-to-end solution with the following features:

    ### Required Features:
    - **Business Logic Replication**: Accurately implement all business rules and workflows from the original TIBCO project.
    - **Database Configuration and Interaction**: Use Spring Data JPA for database integration and persistence.
    - **Logging**: Integrate SLF4J for structured and consistent logging across all layers.
    - **Exception Handling**: Implement centralized and layered exception handling mechanisms.
    - **Rule Engine Integration**: Use Drools to replicate decision tables and rule functions.
    - **Unit Testing**: Create JUnit-based unit tests for all critical components and logic paths.
    - **File Handling**: Implement file I/O operations as required by the business logic.
    - **GCP Pub/Sub Integration**: Develop listeners and publishers for Google Cloud Pub/Sub messaging.
    - **Batch Processing**: Use Spring Batch to implement batch workflows where applicable.

    ### Technical Requirements:
    - Use Lombok to reduce boilerplate code.
    - Follow a layered architecture aligned with SOLID principles.
    - Include inline comments (`// TODO`) for future enhancements or clarifications.
    - Ensure strict compliance with the original TIBCO specifications and logic.

    ### Deliverables for Automation:
    Provide a Bash script that automates project setup and compilation, including:

    1. **Directory Structure**: Commands to create a clean and modular project layout.
    2. **Maven `pom.xml`**:
      - Include dependencies for Spring Boot, Drools, GCP Pub/Sub, Lombok, Spring Batch, SLF4J, Spring Data JPA, and other required libraries.
    3. **Java Codebase**:
      - REST controllers, service classes, repositories, DTOs/entities, and business logic layers.
      - Unit tests for all core components.
    4. **Configuration Files**:
      - A default `application.properties` file with essential Spring Boot configurations.
    5. **Build Commands**:
      - Maven commands to compile and run the application.

    ### Bash Script Requirements:
    - Use proper Bash syntax and handle multiline strings with `cat << 'EOF'`.
    - Ensure the generated project compiles and runs without errors.
    - Include logging to provide runtime visibility.
    - Generate unit test placeholders or implementations for key logic.

    ### Guidelines for Implementation:
    - Maintain clean, modular, and well-documented code.
    - Validate that the Bash script produces a fully functional Spring Boot application.
    - Ensure the final application mirrors the original TIBCO workflows and logic with precision.
  expected_output: >
    A complete Spring Boot application that replicates the full functionality of the original TIBCO BusinessWorks and BusinessEvents projects. 
    The application should preserve business logic, workflows, and integration behavior. Deliverables must follow best practices in Spring Boot 
    development, including modular architecture, clean code, and proper dependency management.
  agent: java_architect

review_spring_boot:
  description: >
    Review the generated Spring Boot application for correctness, completeness, and fidelity to the original TIBCO BusinessWorks and 
    BusinessEvents project. Validate the implementation of business logic, database configuration, unit test coverage, file operations, 
    GCP Pub/Sub messaging, batch processing, and architectural structure. Identify and resolve compilation errors, logic gaps, or 
    architectural inconsistencies. Refactor and refine the codebase to ensure it is production-ready and aligned with best practices.

  expected_output: >
    A fully functional, error-free Java Spring Boot application that accurately replicates the original TIBCO project. 
    Provide feedback on potential improvements and ensure the final output is delivered as a Bash script that, when executed, 
    generates a complete Spring Boot project with the following components:

    1. Directory creation commands for organizing the source code.
    2. A `pom.xml` file with all required Spring Boot dependencies.
    3. Java classes implementing REST controllers, entities, services, and rule logic using a tiered architecture and SOLID principles.
    4. An `application.properties` file with essential configuration.
    5. Maven commands to compile and run the application.
    6. Proper Bash syntax and multiline string handling using `cat << 'EOF' > file`.

    Ensure the script compiles and runs the project without errors, and the application reflects the original TIBCO logic and workflows.
  agent: java_reviewer